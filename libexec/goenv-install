#!/usr/bin/env bash
# Summary: Install a version of Go.
#
# Usage: goenv install <version>
#
# Versions should be in the form of N.N.N

# Bomb out if we hit an error, ever
set -e

# Verbose output in debug mode
[ -n "$GOENV_DEBUG" ] && {
  set -x
}

# Pull the desired version out of ARGV
version="$1"
version_dir="$GOENV_ROOT/versions/$version"

# stash the pwd
OLDPWD=$(pwd)

# Make the version dir and get in there
mkdir -p "$version_dir"
cd "$version_dir"

platform="$(uname -s | tr '[:upper:]' '[:lower:]')"

if [ "$(uname -m)" = "x86_64" ]; then
  arch="amd64"
else
  arch="386"
fi

if [ "$platform" = "darwin" ]; then
  # Since go version 1.2, osx packages were subdivided into 10.6 and 10.8
  if [ "$version" = "1.2" -o "$version" \> "1.2" ]; then
    if [ "$(uname -r)" \> "12" ]; then
      extra="-osx10.8"
    else
      extra="-osx10.6"
    fi
  fi
fi




function vercomp () {
    # http://stackoverflow.com/questions/4023830
    # 0: '='
    # 1: '>'
    # 2: '<'
    if [[ $1 == $2 ]]
    then
        echo 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            echo 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            echo 2
        fi
    done
#    echo 0
}


rtn=$(vercomp ${version} 1.2)
# URL to download from
if [ "$rtn" == "1" ]
then
    download="http://golang.org/dl/go${version}.${platform}-${arch}${extra}.tar.gz"
else
    download="https://storage.googleapis.com/golang/go${version}.${platform}-${arch}${extra}.tar.gz"
fi
# Can't get too clever here
set +e

# Download binary tarball and install
# Linux downloads are formatted differently from OS X
(
  curl --progress -L -f "$download" > "/tmp/go${version}.${platform}-${arch}.tar.gz" && \
  tar zxvf "/tmp/go${version}.${platform}-${arch}.tar.gz" --strip-components 1 && \
  rm "/tmp/go${version}.${platform}-${arch}.tar.gz"
) || \
  {
    cd $OLDPWD
    rmdir "$version_dir"

    echo "goenv: unable to install Go \`${version}' from binary, download not available at ${download}"
    exit 1
  }

echo "Installed ${version}"
cd $OLDPWD

exec "${GOENV_ROOT}/bin/goenv" rehash
