#!/usr/bin/env bash
# Summary: Install a version of Go.
#
# Usage: goenv install <version>
#
# Versions should be in the form of N.N.N

# Bomb out if we hit an error, ever
set -e

# Verbose output in debug mode
[ -n "$GOENV_DEBUG" ] && {
  set -x
}

BASE_URI="http://golang.org/dl/"

REGEX='go[0-9](.[0-9])+.(freebsd|linux|windows|darwin)-(amd64|386)(-(osx10\.[0-9]))?.tar.gz'

if [[ "$1" = "-l" || "$1" = "--list" ]]; then
  (
  curl -s $BASE_URI | \
  grep -o -E -e $REGEX | \
  sed -e 's/go\(.*\)\.\(darwin\|linux\|freebsd\|windows\).*/\1/' | \
  sort | uniq
  ) && exit 0;
fi

# Pull the desired version out of ARGV
version="$1"
version_dir="$GOENV_ROOT/versions/$version"

# stash the pwd
OLDPWD=$(pwd)

# Make the version dir and get in there
mkdir -p "$version_dir"
cd "$version_dir"

platform="$(uname -s | tr '[:upper:]' '[:lower:]')"

if [ "$(uname -m)" = "x86_64" ]; then
  arch="amd64"
else
  arch="386"
fi

if [ "$platform" = "darwin" ]; then
  # Since go version 1.2, osx packages were subdivided into 10.6 and 10.8
  if [ "$version" = "1.2" -o "$version" \> "1.2" ]; then
    if [ "$(uname -r)" \> "12" ]; then
      extra="-osx10.8"
    else
      extra="-osx10.6"
    fi
  fi
fi

# URL to download from
download="${BASE_URI}go${version}.${platform}-${arch}${extra}.tar.gz"

# Can't get too clever here
set +e

# Download binary tarball and install
# Linux downloads are formatted differently from OS X
(
  curl -s -f "$download" > "/tmp/go${version}.${platform}-${arch}.tar.gz" && \
  tar zxvf "/tmp/go${version}.${platform}-${arch}.tar.gz" --strip-components 1 && \
  rm "/tmp/go${version}.${platform}-${arch}.tar.gz"
) || \
  {
    cd $OLDPWD
    rmdir "$version_dir"

    echo "goenv: unable to install Go \`${version}' from binary, download not available"
    exit 1
  }

echo "Installed ${version}"
cd $OLDPWD

exec "${GOENV_ROOT}/bin/goenv" rehash
